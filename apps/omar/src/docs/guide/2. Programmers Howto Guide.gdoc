[<a id='top'/>]
* "Override a Service Method":#serviceMethod
* "Override a Controller Action":#ogcController

[<a id='serviceMethod'/>]
h2. Override a Service Method

In this example we would like to override the method called createImagesKml
inside another plugin. The createImagesKml is located in the omar-ogc plugin and we would like to
override the method in a plugin outside the OMAR[&trade;] distribution ?


Change to directory omar/plugins and create a new plugin called omar-site by running the command
{code}
  grails create-plugin omar-site.
{code}

A directory should now be created called omar-site.  Change directory into the new omar-site plugin
directory and edit the file in grails-app/conf/BuildConfig.groovy and add the dependencies inline
to the plugin. In this example we took the default BuildConfig.groovy and added at the bottom of the file
the inline dependencies.

{code}
grails.project.class.dir = "target/classes"
grails.project.test.class.dir = "target/test-classes"
grails.project.test.reports.dir = "target/test-reports"
//grails.project.war.file = "target/${appName}-${appVersion}.war"
grails.project.dependency.resolution = {
    // inherit Grails' default dependencies
    inherits("global") {
        // uncomment to disable ehcache
        // excludes 'ehcache'
    }
    log "warn" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'
    repositories {
        grailsPlugins()
        grailsHome()
        grailsCentral()

        // uncomment the below to enable remote dependency resolution
        // from public Maven repositories
        //mavenLocal()
        //mavenCentral()
        //mavenRepo "http://snapshots.repository.codehaus.org"
        //mavenRepo "http://repository.codehaus.org"
        //mavenRepo "http://download.java.net/maven/2/"
        //mavenRepo "http://repository.jboss.com/maven2/"
    }
    dependencies {
        // specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.

        // runtime 'mysql:mysql-connector-java:5.1.5'
    }
}
grails.plugin.location.'omar-core' = '../../plugins/omar-core'
grails.plugin.location.'omar-ogc' = '../../plugins/omar-ogc'
grails.plugin.location.'omar-raster' = '../../plugins/omar-raster'
grails.plugin.location.'omar-video' = '../../plugins/omar-video'
grails.plugin.location.'postgis' = '../../plugins/postgis'

{code}

Now add a new service that will be used to override the current implementation of the createImagesKml.
I do this so we can organize the code into it's own location.  First,  execute the command
{code}
grails create-service org.ossim.omar.KmlSite
{code}
Next, edit the File grails-app/service/org/ossim/omar/KmlSiteService.groovy and make it look like the code here:
{code}
 package org.ossim.omar

 import groovy.xml.StreamingMarkupBuilder

 class KmlSiteService{

     static transactional = true

     def myCreateImages(List<org.ossim.omar.RasterEntry> rasterEntries,
                                                 Map wmsParams,
                                                 Map params)
     {
       def kmlbuilder = new StreamingMarkupBuilder()

       kmlbuilder.encoding = "UTF-8"
       def kmlnode = {
         mkp.xmlDeclaration()
         kml("xmlns": "http://earth.google.com/kml/2.1") {
           Document() {
               name("Omar WMS")
           }
         }
       }
       def kmlwriter = new StringWriter()

       kmlwriter << kmlbuilder.bind(kmlnode)

       kmlwriter.buffer
     }
 }
{code}

The code example creates and returns an empty KML document.  This can be used as an initial template to
override a different site specific KML generation.

We will edit the file OmarSiteGrailsPlugin.groovy found in the root directory of the plugin.  So we can more easily read the
examples here we will only show the parts of the file that are modified.  First, we will add the proper attributes
to the class so we can retain for later use.

{code}
def oldCreateImagesKml = null
def kmlSiteService     = null
{code}

Now add the doWithDynamicMethod modifications to the same class so the new method looks like the following code segment

{code}
def doWithDynamicMethods = { ctx ->
    kmlSiteService = ctx.kmlSiteService
    oldCreateImagesKml  = KmlService.metaClass.getMetaMethod("createImagesKml", [List, Map, Map] as Class[])
    KmlService.metaClass.createImagesKml = { List<org.ossim.omar.RasterEntry> rasterEntries,
                                             Map wmsParams,
                                             Map params ->
       kmlSiteService.myCreateImagesKml(rasterEntries, wmsParams, params)
       //oldCreateImagesKml.invoke(delegate, rasterEntries, wmsParams, params)
    }
}
{code}

{note}
We only need to add oldCreateImagesKml if we want to simulate a virtual method override
and do not need to replace the original code but only massage the input to the original
source code we are overriding.  This way we can still call the original file if we maintain the address
before we replace it with the new call.  Here we override the createImagesKml and do not call the old base class'

When overriding a method and saving the old method you must match the signature of the
argument list exactly
{note}


For good measure we will package the plugin to verify everything is built by executing the following
command in the root omar-site plugin directory

{code}
grails package-plugin
{code}

Now you can re-package Omar and add your new plugin to the application file found in apps/omar/grails-app/conf/BuildConfig.groovy

{code}
grails.plugin.location.'omar-site' = "../../plugins/omar-site"   
{code}

Now package a new war file  and then deploy your war to the tomcat server

{code}
grails war
{code}

"Back To Top":#top
[<hr/>]
[<a id='ogcController'/>]
h2. Override a Controller Action

In this example we would like to override the wms Action found on OgcController
inside another plugin. We will setup a template that you can use to massage the input url and
redirect to another url.  This template can be used with any algorithm adhering to the massage the input
and redirect implementation.

Change to directory omar/plugins and, if you have not already done so, create a new plugin called omar-site by running the command

{code}
  grails create-plugin omar-site
{code}

A directory should now be created called omar-site.  Change directory into the new omar-site plugin directory and edit the file in
grails-app/conf/BuildConfig.groovy and add the dependencies inline to the plugin as seen here
in this example.

{code}
grails.project.class.dir = "target/classes"
grails.project.test.class.dir = "target/test-classes"
grails.project.test.reports.dir = "target/test-reports"
//grails.project.war.file = "target/${appName}-${appVersion}.war"
grails.project.dependency.resolution = {
    // inherit Grails' default dependencies
    inherits("global") {
        // uncomment to disable ehcache
        // excludes 'ehcache'
    }
    log "warn" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'
    repositories {
        grailsPlugins()
        grailsHome()
        grailsCentral()

        // uncomment the below to enable remote dependency resolution
        // from public Maven repositories
        //mavenLocal()
        //mavenCentral()
        //mavenRepo "http://snapshots.repository.codehaus.org"
        //mavenRepo "http://repository.codehaus.org"
        //mavenRepo "http://download.java.net/maven/2/"
        //mavenRepo "http://repository.jboss.com/maven2/"
    }
    dependencies {
        // specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.

        // runtime 'mysql:mysql-connector-java:5.1.5'
    }
}
grails.plugin.location.'omar-core' = '../../plugins/omar-core'
grails.plugin.location.'omar-ogc' = '../../plugins/omar-ogc'
grails.plugin.location.'omar-raster' = '../../plugins/omar-raster'
grails.plugin.location.'omar-video' = '../../plugins/omar-video'
grails.plugin.location.'postgis' = '../../plugins/postgis'

{code}

Now add a new Controller that will be used to override the current OgcController.
{code}
grails create-controller org.ossim.omar.OgcExtend
{code}

edit the File grails-app/contoller/org/ossim/omar/OgcExtendController.groovy and make it look like the code here:

{code}
package org.ossim.omar

class OgcExtendController extends OgcController{

    def wmsFilter = {
      if(params.redirected)
      {
        println "REDIRECTED TO HERE"
        wms()
      }
      else
      {
        println "REDIRECTING"
        params.redirected=true
        redirect(controller:"ogc", action:"wms", params:params)
        null
      }
    }
}
{code}

Now we need to map url calls to the ogc/wms path to our new controller's path ogcExtend/wmsFilter location.
Edit a file called SiteUrlMappings.groovy and put it under grails-app/conf. The file content should look like this:

{code}
class SiteUrlMappings {

	static mappings = {
      "/ogc/wms**"(controller:"ogcExtend", action:"wmsFilter")
	}
}
{code}

{note}
We must name the UrlMappings to a different name than UrlMappings.groovy or your
new mappings will not take affect.  We want to avoid editing any code in the main application configuration and do
this inside our own plugin.
{note}

This example will map any url containing ogc/wms path to our new OgcExtend controller's
wmsFilter.

For good measure we will package the plugin to verify everything is built by executing the following
command in the root omar-site plugin directory

{code}
grails package-plugin
{code}

Now you can re-package Omar and add your new plugin to the application file found in apps/omar/grails-app/conf/BuildConfig.groovy

{code}
grails.plugin.location.'omar-site' = "../../plugins/omar-site"
{code}

Now package a new war file  and then deploy your war to the tomcat server

{code}
grails war
{code}

"Back To Top":#top
